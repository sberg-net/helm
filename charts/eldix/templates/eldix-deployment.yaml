apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ template "eldix.fullname" . }}-app"
  labels: {{- include "common.labels.standard" . | nindent 8 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ template "eldix.fullname" . }}-app"
  template:
    metadata:
      labels:
        app: "{{ template "eldix.fullname" . }}-app"
        {{- include "common.labels.standard" . | nindent 8 }}
    spec:
      {{- with .Values.eldix.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.eldix.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.mariadb.enabled }}
      initContainers:
        - name: mariadb-isalive
          image: "{{ .Values.mariadb.image.registry }}/{{ .Values.mariadb.image.repository }}:{{ .Values.mariadb.image.tag }}"
          env:
            - name: MYSQL_USER
              value: {{ .Values.mariadb.auth.username }}
            - name: MYSQL_PASSWORD
              value: {{ .Values.mariadb.auth.password }}
          command:
            - "sh"
            - "-c"
            - {{ printf "until mysql --host=%s-mariadb --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} --execute=\"SELECT 1;\"; do echo waiting for mysql; sleep 2; done;" .Release.Name }}
        {{- end }}
      containers:
      - name: {{ template "eldix.fullname" . }}
        env:
          {{ include "eldix.env" . | indent 8 }}
          {{- with .Values.eldix.dynamicParameter }}
          {{ toYaml . | nindent 8 }}
          {{- end }}
        image: {{ template "eldix.image" . }}
        {{- with .Values.eldix.livenessProbe }}
        {{- if .enabled }}
        ports:
          - name: smtp
            containerPort: 8888
            protocol: TCP
          - name: web
            containerPort: 8080
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: {{ .initialDelaySeconds }}
          periodSeconds: {{ .periodSeconds }}
          timeoutSeconds: {{ .timeoutSeconds }}
          successThreshold: {{ .successThreshold }}
          failureThreshold: {{ .failureThreshold }}
        {{- end }}
        {{- end }}
        {{- with .Values.eldix.readinessProbe }}
        {{- if .enabled }}
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: {{ .initialDelaySeconds }}
          periodSeconds: {{ .periodSeconds }}
          timeoutSeconds: {{ .timeoutSeconds }}
          successThreshold: {{ .successThreshold }}
          failureThreshold: {{ .failureThreshold }}
      {{- end }}
      {{- end }}
      {{- with .Values.eldix.startupProbe }}
      {{- if .enabled }}
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: {{ .initialDelaySeconds }}
          periodSeconds: {{ .periodSeconds }}
          timeoutSeconds: {{ .timeoutSeconds }}
          successThreshold: {{ .successThreshold }}
          failureThreshold: {{ .failureThreshold }}
      {{- end }}
      {{- end }}
        {{ if .Values.eldix.persistence.enabled -}}
        volumeMounts:
          - mountPath: /eldix
            name: eldix-data
            subPath: {{- if .Values.eldix.persistence.subPath }} {{ .Values.eldix.persistence.subPath }}/app {{- else }} "app" {{- end}}
          {{- end }}
        imagePullPolicy: {{ .Values.eldix.image.pullPolicy }}
        resources:
          limits:
            cpu: {{ .Values.eldix.resources.limits.cpu }}
            memory: {{ .Values.eldix.resources.limits.memory }}
          requests:
            cpu: {{ .Values.eldix.resources.requests.cpu }}
            memory: {{ .Values.eldix.resources.requests.memory }}
      imagePullSecrets:
      - name: {{ .Values.privateRegistry.imagePullSecret.name }}
      restartPolicy: Always
      volumes:
        - name: eldix-data
          {{- if .Values.eldix.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.eldix.persistence.useExistingPVC }} {{ .Values.eldix.persistence.useExistingPVC }} {{- else }} data-{{ template "eldix.fullname" . }}-app {{- end}}
          {{- else }}
          emptyDir: {}
          {{- end }}


